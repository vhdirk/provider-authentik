/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RACInitParameters struct {

	// +crossplane:generate:reference:type=github.com/vhdirk/provider-authentik/apis/authentik/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("uuid",true)
	AuthenticationFlow *string `json:"authenticationFlow,omitempty" tf:"authentication_flow,omitempty"`

	// Reference to a Flow in authentik to populate authenticationFlow.
	// +kubebuilder:validation:Optional
	AuthenticationFlowRef *v1.Reference `json:"authenticationFlowRef,omitempty" tf:"-"`

	// Selector for a Flow in authentik to populate authenticationFlow.
	// +kubebuilder:validation:Optional
	AuthenticationFlowSelector *v1.Selector `json:"authenticationFlowSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/vhdirk/provider-authentik/apis/authentik/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("uuid",true)
	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// Reference to a Flow in authentik to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowRef *v1.Reference `json:"authorizationFlowRef,omitempty" tf:"-"`

	// Selector for a Flow in authentik to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowSelector *v1.Selector `json:"authorizationFlowSelector,omitempty" tf:"-"`

	// Defaults to `seconds=0`.
	ConnectionExpiry *string `json:"connectionExpiry,omitempty" tf:"connection_expiry,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PropertyMappings []*string `json:"propertyMappings,omitempty" tf:"property_mappings,omitempty"`

	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `json:"settings,omitempty" tf:"settings,omitempty"`
}

type RACObservation struct {
	AuthenticationFlow *string `json:"authenticationFlow,omitempty" tf:"authentication_flow,omitempty"`

	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// Defaults to `seconds=0`.
	ConnectionExpiry *string `json:"connectionExpiry,omitempty" tf:"connection_expiry,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PropertyMappings []*string `json:"propertyMappings,omitempty" tf:"property_mappings,omitempty"`

	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `json:"settings,omitempty" tf:"settings,omitempty"`
}

type RACParameters struct {

	// +crossplane:generate:reference:type=github.com/vhdirk/provider-authentik/apis/authentik/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("uuid",true)
	// +kubebuilder:validation:Optional
	AuthenticationFlow *string `json:"authenticationFlow,omitempty" tf:"authentication_flow,omitempty"`

	// Reference to a Flow in authentik to populate authenticationFlow.
	// +kubebuilder:validation:Optional
	AuthenticationFlowRef *v1.Reference `json:"authenticationFlowRef,omitempty" tf:"-"`

	// Selector for a Flow in authentik to populate authenticationFlow.
	// +kubebuilder:validation:Optional
	AuthenticationFlowSelector *v1.Selector `json:"authenticationFlowSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/vhdirk/provider-authentik/apis/authentik/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("uuid",true)
	// +kubebuilder:validation:Optional
	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// Reference to a Flow in authentik to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowRef *v1.Reference `json:"authorizationFlowRef,omitempty" tf:"-"`

	// Selector for a Flow in authentik to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowSelector *v1.Selector `json:"authorizationFlowSelector,omitempty" tf:"-"`

	// Defaults to `seconds=0`.
	// +kubebuilder:validation:Optional
	ConnectionExpiry *string `json:"connectionExpiry,omitempty" tf:"connection_expiry,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PropertyMappings []*string `json:"propertyMappings,omitempty" tf:"property_mappings,omitempty"`

	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	// +kubebuilder:validation:Optional
	Settings *string `json:"settings,omitempty" tf:"settings,omitempty"`
}

// RACSpec defines the desired state of RAC
type RACSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RACParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RACInitParameters `json:"initProvider,omitempty"`
}

// RACStatus defines the observed state of RAC.
type RACStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RACObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RAC is the Schema for the RACs API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type RAC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RACSpec   `json:"spec"`
	Status RACStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RACList contains a list of RACs
type RACList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RAC `json:"items"`
}

// Repository type metadata.
var (
	RAC_Kind             = "RAC"
	RAC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RAC_Kind}.String()
	RAC_KindAPIVersion   = RAC_Kind + "." + CRDGroupVersion.String()
	RAC_GroupVersionKind = CRDGroupVersion.WithKind(RAC_Kind)
)

func init() {
	SchemeBuilder.Register(&RAC{}, &RACList{})
}
