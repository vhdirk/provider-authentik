/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/vhdirk/provider-authentik/apis/authentik/v1alpha1"
	v1alpha11 "github.com/vhdirk/provider-authentik/apis/propertymappingprovider/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this OAuth2.
func (mg *OAuth2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.ForProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.ForProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizationFlow")
	}
	mg.Spec.ForProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizationFlowRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.PropertyMappings),
		Extract:       resource.ExtractParamPath("id", true),
		References:    mg.Spec.ForProvider.PropertyMappingsRefs,
		Selector:      mg.Spec.ForProvider.PropertyMappingsSelector,
		To: reference.To{
			List:    &v1alpha11.ScopeList{},
			Managed: &v1alpha11.Scope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PropertyMappings")
	}
	mg.Spec.ForProvider.PropertyMappings = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.PropertyMappingsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.InitProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.InitProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizationFlow")
	}
	mg.Spec.InitProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizationFlowRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.PropertyMappings),
		Extract:       resource.ExtractParamPath("id", true),
		References:    mg.Spec.InitProvider.PropertyMappingsRefs,
		Selector:      mg.Spec.InitProvider.PropertyMappingsSelector,
		To: reference.To{
			List:    &v1alpha11.ScopeList{},
			Managed: &v1alpha11.Scope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PropertyMappings")
	}
	mg.Spec.InitProvider.PropertyMappings = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.PropertyMappingsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Proxy.
func (mg *Proxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.ForProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.ForProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizationFlow")
	}
	mg.Spec.ForProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizationFlowRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.InitProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.InitProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizationFlow")
	}
	mg.Spec.InitProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizationFlowRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RAC.
func (mg *RAC) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.ForProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.ForProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizationFlow")
	}
	mg.Spec.ForProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizationFlowRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.InitProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.InitProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizationFlow")
	}
	mg.Spec.InitProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizationFlowRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Radius.
func (mg *Radius) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.ForProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.ForProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizationFlow")
	}
	mg.Spec.ForProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizationFlowRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.InitProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.InitProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizationFlow")
	}
	mg.Spec.InitProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizationFlowRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SAML.
func (mg *SAML) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.ForProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.ForProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizationFlow")
	}
	mg.Spec.ForProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizationFlowRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizationFlow),
		Extract:      resource.ExtractParamPath("uuid", true),
		Reference:    mg.Spec.InitProvider.AuthorizationFlowRef,
		Selector:     mg.Spec.InitProvider.AuthorizationFlowSelector,
		To: reference.To{
			List:    &v1alpha1.FlowList{},
			Managed: &v1alpha1.Flow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizationFlow")
	}
	mg.Spec.InitProvider.AuthorizationFlow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizationFlowRef = rsp.ResolvedReference

	return nil
}
