//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspace) DeepCopyInto(out *GoogleWorkspace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspace.
func (in *GoogleWorkspace) DeepCopy() *GoogleWorkspace {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoogleWorkspace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceInitParameters) DeepCopyInto(out *GoogleWorkspaceInitParameters) {
	*out = *in
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.DefaultGroupEmailDomain != nil {
		in, out := &in.DefaultGroupEmailDomain, &out.DefaultGroupEmailDomain
		*out = new(string)
		**out = **in
	}
	if in.DelegatedSubject != nil {
		in, out := &in.DelegatedSubject, &out.DelegatedSubject
		*out = new(string)
		**out = **in
	}
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceInitParameters.
func (in *GoogleWorkspaceInitParameters) DeepCopy() *GoogleWorkspaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceList) DeepCopyInto(out *GoogleWorkspaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GoogleWorkspace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceList.
func (in *GoogleWorkspaceList) DeepCopy() *GoogleWorkspaceList {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoogleWorkspaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceObservation) DeepCopyInto(out *GoogleWorkspaceObservation) {
	*out = *in
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.DefaultGroupEmailDomain != nil {
		in, out := &in.DefaultGroupEmailDomain, &out.DefaultGroupEmailDomain
		*out = new(string)
		**out = **in
	}
	if in.DelegatedSubject != nil {
		in, out := &in.DelegatedSubject, &out.DelegatedSubject
		*out = new(string)
		**out = **in
	}
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceObservation.
func (in *GoogleWorkspaceObservation) DeepCopy() *GoogleWorkspaceObservation {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceParameters) DeepCopyInto(out *GoogleWorkspaceParameters) {
	*out = *in
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.DefaultGroupEmailDomain != nil {
		in, out := &in.DefaultGroupEmailDomain, &out.DefaultGroupEmailDomain
		*out = new(string)
		**out = **in
	}
	if in.DelegatedSubject != nil {
		in, out := &in.DelegatedSubject, &out.DelegatedSubject
		*out = new(string)
		**out = **in
	}
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceParameters.
func (in *GoogleWorkspaceParameters) DeepCopy() *GoogleWorkspaceParameters {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceSpec) DeepCopyInto(out *GoogleWorkspaceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceSpec.
func (in *GoogleWorkspaceSpec) DeepCopy() *GoogleWorkspaceSpec {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleWorkspaceStatus) DeepCopyInto(out *GoogleWorkspaceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleWorkspaceStatus.
func (in *GoogleWorkspaceStatus) DeepCopy() *GoogleWorkspaceStatus {
	if in == nil {
		return nil
	}
	out := new(GoogleWorkspaceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAP) DeepCopyInto(out *LDAP) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAP.
func (in *LDAP) DeepCopy() *LDAP {
	if in == nil {
		return nil
	}
	out := new(LDAP)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LDAP) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPInitParameters) DeepCopyInto(out *LDAPInitParameters) {
	*out = *in
	if in.BaseDn != nil {
		in, out := &in.BaseDn, &out.BaseDn
		*out = new(string)
		**out = **in
	}
	if in.BindFlow != nil {
		in, out := &in.BindFlow, &out.BindFlow
		*out = new(string)
		**out = **in
	}
	if in.BindMode != nil {
		in, out := &in.BindMode, &out.BindMode
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.GIDStartNumber != nil {
		in, out := &in.GIDStartNumber, &out.GIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SearchMode != nil {
		in, out := &in.SearchMode, &out.SearchMode
		*out = new(string)
		**out = **in
	}
	if in.TLSServerName != nil {
		in, out := &in.TLSServerName, &out.TLSServerName
		*out = new(string)
		**out = **in
	}
	if in.UIDStartNumber != nil {
		in, out := &in.UIDStartNumber, &out.UIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.UnbindFlow != nil {
		in, out := &in.UnbindFlow, &out.UnbindFlow
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPInitParameters.
func (in *LDAPInitParameters) DeepCopy() *LDAPInitParameters {
	if in == nil {
		return nil
	}
	out := new(LDAPInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPList) DeepCopyInto(out *LDAPList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LDAP, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPList.
func (in *LDAPList) DeepCopy() *LDAPList {
	if in == nil {
		return nil
	}
	out := new(LDAPList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LDAPList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPObservation) DeepCopyInto(out *LDAPObservation) {
	*out = *in
	if in.BaseDn != nil {
		in, out := &in.BaseDn, &out.BaseDn
		*out = new(string)
		**out = **in
	}
	if in.BindFlow != nil {
		in, out := &in.BindFlow, &out.BindFlow
		*out = new(string)
		**out = **in
	}
	if in.BindMode != nil {
		in, out := &in.BindMode, &out.BindMode
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.GIDStartNumber != nil {
		in, out := &in.GIDStartNumber, &out.GIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SearchMode != nil {
		in, out := &in.SearchMode, &out.SearchMode
		*out = new(string)
		**out = **in
	}
	if in.TLSServerName != nil {
		in, out := &in.TLSServerName, &out.TLSServerName
		*out = new(string)
		**out = **in
	}
	if in.UIDStartNumber != nil {
		in, out := &in.UIDStartNumber, &out.UIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.UnbindFlow != nil {
		in, out := &in.UnbindFlow, &out.UnbindFlow
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPObservation.
func (in *LDAPObservation) DeepCopy() *LDAPObservation {
	if in == nil {
		return nil
	}
	out := new(LDAPObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPParameters) DeepCopyInto(out *LDAPParameters) {
	*out = *in
	if in.BaseDn != nil {
		in, out := &in.BaseDn, &out.BaseDn
		*out = new(string)
		**out = **in
	}
	if in.BindFlow != nil {
		in, out := &in.BindFlow, &out.BindFlow
		*out = new(string)
		**out = **in
	}
	if in.BindMode != nil {
		in, out := &in.BindMode, &out.BindMode
		*out = new(string)
		**out = **in
	}
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.GIDStartNumber != nil {
		in, out := &in.GIDStartNumber, &out.GIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SearchMode != nil {
		in, out := &in.SearchMode, &out.SearchMode
		*out = new(string)
		**out = **in
	}
	if in.TLSServerName != nil {
		in, out := &in.TLSServerName, &out.TLSServerName
		*out = new(string)
		**out = **in
	}
	if in.UIDStartNumber != nil {
		in, out := &in.UIDStartNumber, &out.UIDStartNumber
		*out = new(float64)
		**out = **in
	}
	if in.UnbindFlow != nil {
		in, out := &in.UnbindFlow, &out.UnbindFlow
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPParameters.
func (in *LDAPParameters) DeepCopy() *LDAPParameters {
	if in == nil {
		return nil
	}
	out := new(LDAPParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPSpec) DeepCopyInto(out *LDAPSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPSpec.
func (in *LDAPSpec) DeepCopy() *LDAPSpec {
	if in == nil {
		return nil
	}
	out := new(LDAPSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LDAPStatus) DeepCopyInto(out *LDAPStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LDAPStatus.
func (in *LDAPStatus) DeepCopy() *LDAPStatus {
	if in == nil {
		return nil
	}
	out := new(LDAPStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntra) DeepCopyInto(out *MicrosoftEntra) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntra.
func (in *MicrosoftEntra) DeepCopy() *MicrosoftEntra {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntra)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MicrosoftEntra) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraInitParameters) DeepCopyInto(out *MicrosoftEntraInitParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraInitParameters.
func (in *MicrosoftEntraInitParameters) DeepCopy() *MicrosoftEntraInitParameters {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraList) DeepCopyInto(out *MicrosoftEntraList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MicrosoftEntra, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraList.
func (in *MicrosoftEntraList) DeepCopy() *MicrosoftEntraList {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MicrosoftEntraList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraObservation) DeepCopyInto(out *MicrosoftEntraObservation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraObservation.
func (in *MicrosoftEntraObservation) DeepCopy() *MicrosoftEntraObservation {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraParameters) DeepCopyInto(out *MicrosoftEntraParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.GroupDeleteAction != nil {
		in, out := &in.GroupDeleteAction, &out.GroupDeleteAction
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.UserDeleteAction != nil {
		in, out := &in.UserDeleteAction, &out.UserDeleteAction
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraParameters.
func (in *MicrosoftEntraParameters) DeepCopy() *MicrosoftEntraParameters {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraSpec) DeepCopyInto(out *MicrosoftEntraSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraSpec.
func (in *MicrosoftEntraSpec) DeepCopy() *MicrosoftEntraSpec {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftEntraStatus) DeepCopyInto(out *MicrosoftEntraStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftEntraStatus.
func (in *MicrosoftEntraStatus) DeepCopy() *MicrosoftEntraStatus {
	if in == nil {
		return nil
	}
	out := new(MicrosoftEntraStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2) DeepCopyInto(out *OAuth2) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2.
func (in *OAuth2) DeepCopy() *OAuth2 {
	if in == nil {
		return nil
	}
	out := new(OAuth2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OAuth2) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2InitParameters) DeepCopyInto(out *OAuth2InitParameters) {
	*out = *in
	if in.AccessCodeValidity != nil {
		in, out := &in.AccessCodeValidity, &out.AccessCodeValidity
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AllowedRedirectUris != nil {
		in, out := &in.AllowedRedirectUris, &out.AllowedRedirectUris
		*out = make([]map[string]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]*string, len(*in))
				for key, val := range *in {
					var outVal *string
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(string)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
		}
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretSecretRef != nil {
		in, out := &in.ClientSecretSecretRef, &out.ClientSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientType != nil {
		in, out := &in.ClientType, &out.ClientType
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.IncludeClaimsInIDToken != nil {
		in, out := &in.IncludeClaimsInIDToken, &out.IncludeClaimsInIDToken
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsRefs != nil {
		in, out := &in.PropertyMappingsRefs, &out.PropertyMappingsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PropertyMappingsSelector != nil {
		in, out := &in.PropertyMappingsSelector, &out.PropertyMappingsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SigningKey != nil {
		in, out := &in.SigningKey, &out.SigningKey
		*out = new(string)
		**out = **in
	}
	if in.SubMode != nil {
		in, out := &in.SubMode, &out.SubMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2InitParameters.
func (in *OAuth2InitParameters) DeepCopy() *OAuth2InitParameters {
	if in == nil {
		return nil
	}
	out := new(OAuth2InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2List) DeepCopyInto(out *OAuth2List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OAuth2, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2List.
func (in *OAuth2List) DeepCopy() *OAuth2List {
	if in == nil {
		return nil
	}
	out := new(OAuth2List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OAuth2List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2Observation) DeepCopyInto(out *OAuth2Observation) {
	*out = *in
	if in.AccessCodeValidity != nil {
		in, out := &in.AccessCodeValidity, &out.AccessCodeValidity
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AllowedRedirectUris != nil {
		in, out := &in.AllowedRedirectUris, &out.AllowedRedirectUris
		*out = make([]map[string]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]*string, len(*in))
				for key, val := range *in {
					var outVal *string
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(string)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
		}
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientType != nil {
		in, out := &in.ClientType, &out.ClientType
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludeClaimsInIDToken != nil {
		in, out := &in.IncludeClaimsInIDToken, &out.IncludeClaimsInIDToken
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SigningKey != nil {
		in, out := &in.SigningKey, &out.SigningKey
		*out = new(string)
		**out = **in
	}
	if in.SubMode != nil {
		in, out := &in.SubMode, &out.SubMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2Observation.
func (in *OAuth2Observation) DeepCopy() *OAuth2Observation {
	if in == nil {
		return nil
	}
	out := new(OAuth2Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2Parameters) DeepCopyInto(out *OAuth2Parameters) {
	*out = *in
	if in.AccessCodeValidity != nil {
		in, out := &in.AccessCodeValidity, &out.AccessCodeValidity
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AllowedRedirectUris != nil {
		in, out := &in.AllowedRedirectUris, &out.AllowedRedirectUris
		*out = make([]map[string]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]*string, len(*in))
				for key, val := range *in {
					var outVal *string
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(string)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
		}
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretSecretRef != nil {
		in, out := &in.ClientSecretSecretRef, &out.ClientSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientType != nil {
		in, out := &in.ClientType, &out.ClientType
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.IncludeClaimsInIDToken != nil {
		in, out := &in.IncludeClaimsInIDToken, &out.IncludeClaimsInIDToken
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsRefs != nil {
		in, out := &in.PropertyMappingsRefs, &out.PropertyMappingsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PropertyMappingsSelector != nil {
		in, out := &in.PropertyMappingsSelector, &out.PropertyMappingsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SigningKey != nil {
		in, out := &in.SigningKey, &out.SigningKey
		*out = new(string)
		**out = **in
	}
	if in.SubMode != nil {
		in, out := &in.SubMode, &out.SubMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2Parameters.
func (in *OAuth2Parameters) DeepCopy() *OAuth2Parameters {
	if in == nil {
		return nil
	}
	out := new(OAuth2Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2Spec) DeepCopyInto(out *OAuth2Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2Spec.
func (in *OAuth2Spec) DeepCopy() *OAuth2Spec {
	if in == nil {
		return nil
	}
	out := new(OAuth2Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OAuth2Status) DeepCopyInto(out *OAuth2Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OAuth2Status.
func (in *OAuth2Status) DeepCopy() *OAuth2Status {
	if in == nil {
		return nil
	}
	out := new(OAuth2Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Proxy) DeepCopyInto(out *Proxy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Proxy.
func (in *Proxy) DeepCopy() *Proxy {
	if in == nil {
		return nil
	}
	out := new(Proxy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Proxy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyInitParameters) DeepCopyInto(out *ProxyInitParameters) {
	*out = *in
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.BasicAuthEnabled != nil {
		in, out := &in.BasicAuthEnabled, &out.BasicAuthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BasicAuthPasswordAttribute != nil {
		in, out := &in.BasicAuthPasswordAttribute, &out.BasicAuthPasswordAttribute
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthUsernameAttribute != nil {
		in, out := &in.BasicAuthUsernameAttribute, &out.BasicAuthUsernameAttribute
		*out = new(string)
		**out = **in
	}
	if in.CookieDomain != nil {
		in, out := &in.CookieDomain, &out.CookieDomain
		*out = new(string)
		**out = **in
	}
	if in.ExternalHost != nil {
		in, out := &in.ExternalHost, &out.ExternalHost
		*out = new(string)
		**out = **in
	}
	if in.InterceptHeaderAuth != nil {
		in, out := &in.InterceptHeaderAuth, &out.InterceptHeaderAuth
		*out = new(bool)
		**out = **in
	}
	if in.InternalHost != nil {
		in, out := &in.InternalHost, &out.InternalHost
		*out = new(string)
		**out = **in
	}
	if in.InternalHostSSLValidation != nil {
		in, out := &in.InternalHostSSLValidation, &out.InternalHostSSLValidation
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SkipPathRegex != nil {
		in, out := &in.SkipPathRegex, &out.SkipPathRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyInitParameters.
func (in *ProxyInitParameters) DeepCopy() *ProxyInitParameters {
	if in == nil {
		return nil
	}
	out := new(ProxyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyList) DeepCopyInto(out *ProxyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Proxy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyList.
func (in *ProxyList) DeepCopy() *ProxyList {
	if in == nil {
		return nil
	}
	out := new(ProxyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ProxyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyObservation) DeepCopyInto(out *ProxyObservation) {
	*out = *in
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthEnabled != nil {
		in, out := &in.BasicAuthEnabled, &out.BasicAuthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BasicAuthPasswordAttribute != nil {
		in, out := &in.BasicAuthPasswordAttribute, &out.BasicAuthPasswordAttribute
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthUsernameAttribute != nil {
		in, out := &in.BasicAuthUsernameAttribute, &out.BasicAuthUsernameAttribute
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.CookieDomain != nil {
		in, out := &in.CookieDomain, &out.CookieDomain
		*out = new(string)
		**out = **in
	}
	if in.ExternalHost != nil {
		in, out := &in.ExternalHost, &out.ExternalHost
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InterceptHeaderAuth != nil {
		in, out := &in.InterceptHeaderAuth, &out.InterceptHeaderAuth
		*out = new(bool)
		**out = **in
	}
	if in.InternalHost != nil {
		in, out := &in.InternalHost, &out.InternalHost
		*out = new(string)
		**out = **in
	}
	if in.InternalHostSSLValidation != nil {
		in, out := &in.InternalHostSSLValidation, &out.InternalHostSSLValidation
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SkipPathRegex != nil {
		in, out := &in.SkipPathRegex, &out.SkipPathRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyObservation.
func (in *ProxyObservation) DeepCopy() *ProxyObservation {
	if in == nil {
		return nil
	}
	out := new(ProxyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyParameters) DeepCopyInto(out *ProxyParameters) {
	*out = *in
	if in.AccessTokenValidity != nil {
		in, out := &in.AccessTokenValidity, &out.AccessTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.BasicAuthEnabled != nil {
		in, out := &in.BasicAuthEnabled, &out.BasicAuthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BasicAuthPasswordAttribute != nil {
		in, out := &in.BasicAuthPasswordAttribute, &out.BasicAuthPasswordAttribute
		*out = new(string)
		**out = **in
	}
	if in.BasicAuthUsernameAttribute != nil {
		in, out := &in.BasicAuthUsernameAttribute, &out.BasicAuthUsernameAttribute
		*out = new(string)
		**out = **in
	}
	if in.CookieDomain != nil {
		in, out := &in.CookieDomain, &out.CookieDomain
		*out = new(string)
		**out = **in
	}
	if in.ExternalHost != nil {
		in, out := &in.ExternalHost, &out.ExternalHost
		*out = new(string)
		**out = **in
	}
	if in.InterceptHeaderAuth != nil {
		in, out := &in.InterceptHeaderAuth, &out.InterceptHeaderAuth
		*out = new(bool)
		**out = **in
	}
	if in.InternalHost != nil {
		in, out := &in.InternalHost, &out.InternalHost
		*out = new(string)
		**out = **in
	}
	if in.InternalHostSSLValidation != nil {
		in, out := &in.InternalHostSSLValidation, &out.InternalHostSSLValidation
		*out = new(bool)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.JwksSources != nil {
		in, out := &in.JwksSources, &out.JwksSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.JwtFederationProviders != nil {
		in, out := &in.JwtFederationProviders, &out.JwtFederationProviders
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.JwtFederationSources != nil {
		in, out := &in.JwtFederationSources, &out.JwtFederationSources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RefreshTokenValidity != nil {
		in, out := &in.RefreshTokenValidity, &out.RefreshTokenValidity
		*out = new(string)
		**out = **in
	}
	if in.SkipPathRegex != nil {
		in, out := &in.SkipPathRegex, &out.SkipPathRegex
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyParameters.
func (in *ProxyParameters) DeepCopy() *ProxyParameters {
	if in == nil {
		return nil
	}
	out := new(ProxyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxySpec) DeepCopyInto(out *ProxySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxySpec.
func (in *ProxySpec) DeepCopy() *ProxySpec {
	if in == nil {
		return nil
	}
	out := new(ProxySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxyStatus) DeepCopyInto(out *ProxyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyStatus.
func (in *ProxyStatus) DeepCopy() *ProxyStatus {
	if in == nil {
		return nil
	}
	out := new(ProxyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RAC) DeepCopyInto(out *RAC) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RAC.
func (in *RAC) DeepCopy() *RAC {
	if in == nil {
		return nil
	}
	out := new(RAC)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RAC) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACInitParameters) DeepCopyInto(out *RACInitParameters) {
	*out = *in
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionExpiry != nil {
		in, out := &in.ConnectionExpiry, &out.ConnectionExpiry
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACInitParameters.
func (in *RACInitParameters) DeepCopy() *RACInitParameters {
	if in == nil {
		return nil
	}
	out := new(RACInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACList) DeepCopyInto(out *RACList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RAC, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACList.
func (in *RACList) DeepCopy() *RACList {
	if in == nil {
		return nil
	}
	out := new(RACList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RACList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACObservation) DeepCopyInto(out *RACObservation) {
	*out = *in
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.ConnectionExpiry != nil {
		in, out := &in.ConnectionExpiry, &out.ConnectionExpiry
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACObservation.
func (in *RACObservation) DeepCopy() *RACObservation {
	if in == nil {
		return nil
	}
	out := new(RACObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACParameters) DeepCopyInto(out *RACParameters) {
	*out = *in
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionExpiry != nil {
		in, out := &in.ConnectionExpiry, &out.ConnectionExpiry
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACParameters.
func (in *RACParameters) DeepCopy() *RACParameters {
	if in == nil {
		return nil
	}
	out := new(RACParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACSpec) DeepCopyInto(out *RACSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACSpec.
func (in *RACSpec) DeepCopy() *RACSpec {
	if in == nil {
		return nil
	}
	out := new(RACSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RACStatus) DeepCopyInto(out *RACStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RACStatus.
func (in *RACStatus) DeepCopy() *RACStatus {
	if in == nil {
		return nil
	}
	out := new(RACStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Radius) DeepCopyInto(out *Radius) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Radius.
func (in *Radius) DeepCopy() *Radius {
	if in == nil {
		return nil
	}
	out := new(Radius)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Radius) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusInitParameters) DeepCopyInto(out *RadiusInitParameters) {
	*out = *in
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientNetworks != nil {
		in, out := &in.ClientNetworks, &out.ClientNetworks
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.SharedSecretSecretRef = in.SharedSecretSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusInitParameters.
func (in *RadiusInitParameters) DeepCopy() *RadiusInitParameters {
	if in == nil {
		return nil
	}
	out := new(RadiusInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusList) DeepCopyInto(out *RadiusList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Radius, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusList.
func (in *RadiusList) DeepCopy() *RadiusList {
	if in == nil {
		return nil
	}
	out := new(RadiusList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RadiusList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusObservation) DeepCopyInto(out *RadiusObservation) {
	*out = *in
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientNetworks != nil {
		in, out := &in.ClientNetworks, &out.ClientNetworks
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusObservation.
func (in *RadiusObservation) DeepCopy() *RadiusObservation {
	if in == nil {
		return nil
	}
	out := new(RadiusObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusParameters) DeepCopyInto(out *RadiusParameters) {
	*out = *in
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientNetworks != nil {
		in, out := &in.ClientNetworks, &out.ClientNetworks
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.MfaSupport != nil {
		in, out := &in.MfaSupport, &out.MfaSupport
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.SharedSecretSecretRef = in.SharedSecretSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusParameters.
func (in *RadiusParameters) DeepCopy() *RadiusParameters {
	if in == nil {
		return nil
	}
	out := new(RadiusParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusSpec) DeepCopyInto(out *RadiusSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusSpec.
func (in *RadiusSpec) DeepCopy() *RadiusSpec {
	if in == nil {
		return nil
	}
	out := new(RadiusSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RadiusStatus) DeepCopyInto(out *RadiusStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RadiusStatus.
func (in *RadiusStatus) DeepCopy() *RadiusStatus {
	if in == nil {
		return nil
	}
	out := new(RadiusStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAML) DeepCopyInto(out *SAML) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAML.
func (in *SAML) DeepCopy() *SAML {
	if in == nil {
		return nil
	}
	out := new(SAML)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SAML) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLInitParameters) DeepCopyInto(out *SAMLInitParameters) {
	*out = *in
	if in.AcsURL != nil {
		in, out := &in.AcsURL, &out.AcsURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotBefore != nil {
		in, out := &in.AssertionValidNotBefore, &out.AssertionValidNotBefore
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotOnOrAfter != nil {
		in, out := &in.AssertionValidNotOnOrAfter, &out.AssertionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.Audience != nil {
		in, out := &in.Audience, &out.Audience
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultRelayState != nil {
		in, out := &in.DefaultRelayState, &out.DefaultRelayState
		*out = new(string)
		**out = **in
	}
	if in.DigestAlgorithm != nil {
		in, out := &in.DigestAlgorithm, &out.DigestAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKp != nil {
		in, out := &in.EncryptionKp, &out.EncryptionKp
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDMapping != nil {
		in, out := &in.NameIDMapping, &out.NameIDMapping
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SessionValidNotOnOrAfter != nil {
		in, out := &in.SessionValidNotOnOrAfter, &out.SessionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.SignAssertion != nil {
		in, out := &in.SignAssertion, &out.SignAssertion
		*out = new(bool)
		**out = **in
	}
	if in.SignResponse != nil {
		in, out := &in.SignResponse, &out.SignResponse
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SigningKp != nil {
		in, out := &in.SigningKp, &out.SigningKp
		*out = new(string)
		**out = **in
	}
	if in.SpBinding != nil {
		in, out := &in.SpBinding, &out.SpBinding
		*out = new(string)
		**out = **in
	}
	if in.URLSLOPost != nil {
		in, out := &in.URLSLOPost, &out.URLSLOPost
		*out = new(string)
		**out = **in
	}
	if in.URLSLORedirect != nil {
		in, out := &in.URLSLORedirect, &out.URLSLORedirect
		*out = new(string)
		**out = **in
	}
	if in.URLSsoInit != nil {
		in, out := &in.URLSsoInit, &out.URLSsoInit
		*out = new(string)
		**out = **in
	}
	if in.URLSsoPost != nil {
		in, out := &in.URLSsoPost, &out.URLSsoPost
		*out = new(string)
		**out = **in
	}
	if in.URLSsoRedirect != nil {
		in, out := &in.URLSsoRedirect, &out.URLSsoRedirect
		*out = new(string)
		**out = **in
	}
	if in.VerificationKp != nil {
		in, out := &in.VerificationKp, &out.VerificationKp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLInitParameters.
func (in *SAMLInitParameters) DeepCopy() *SAMLInitParameters {
	if in == nil {
		return nil
	}
	out := new(SAMLInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLList) DeepCopyInto(out *SAMLList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SAML, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLList.
func (in *SAMLList) DeepCopy() *SAMLList {
	if in == nil {
		return nil
	}
	out := new(SAMLList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SAMLList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLObservation) DeepCopyInto(out *SAMLObservation) {
	*out = *in
	if in.AcsURL != nil {
		in, out := &in.AcsURL, &out.AcsURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotBefore != nil {
		in, out := &in.AssertionValidNotBefore, &out.AssertionValidNotBefore
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotOnOrAfter != nil {
		in, out := &in.AssertionValidNotOnOrAfter, &out.AssertionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.Audience != nil {
		in, out := &in.Audience, &out.Audience
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.DefaultRelayState != nil {
		in, out := &in.DefaultRelayState, &out.DefaultRelayState
		*out = new(string)
		**out = **in
	}
	if in.DigestAlgorithm != nil {
		in, out := &in.DigestAlgorithm, &out.DigestAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKp != nil {
		in, out := &in.EncryptionKp, &out.EncryptionKp
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDMapping != nil {
		in, out := &in.NameIDMapping, &out.NameIDMapping
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SessionValidNotOnOrAfter != nil {
		in, out := &in.SessionValidNotOnOrAfter, &out.SessionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.SignAssertion != nil {
		in, out := &in.SignAssertion, &out.SignAssertion
		*out = new(bool)
		**out = **in
	}
	if in.SignResponse != nil {
		in, out := &in.SignResponse, &out.SignResponse
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SigningKp != nil {
		in, out := &in.SigningKp, &out.SigningKp
		*out = new(string)
		**out = **in
	}
	if in.SpBinding != nil {
		in, out := &in.SpBinding, &out.SpBinding
		*out = new(string)
		**out = **in
	}
	if in.URLSLOPost != nil {
		in, out := &in.URLSLOPost, &out.URLSLOPost
		*out = new(string)
		**out = **in
	}
	if in.URLSLORedirect != nil {
		in, out := &in.URLSLORedirect, &out.URLSLORedirect
		*out = new(string)
		**out = **in
	}
	if in.URLSsoInit != nil {
		in, out := &in.URLSsoInit, &out.URLSsoInit
		*out = new(string)
		**out = **in
	}
	if in.URLSsoPost != nil {
		in, out := &in.URLSsoPost, &out.URLSsoPost
		*out = new(string)
		**out = **in
	}
	if in.URLSsoRedirect != nil {
		in, out := &in.URLSsoRedirect, &out.URLSsoRedirect
		*out = new(string)
		**out = **in
	}
	if in.VerificationKp != nil {
		in, out := &in.VerificationKp, &out.VerificationKp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLObservation.
func (in *SAMLObservation) DeepCopy() *SAMLObservation {
	if in == nil {
		return nil
	}
	out := new(SAMLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLParameters) DeepCopyInto(out *SAMLParameters) {
	*out = *in
	if in.AcsURL != nil {
		in, out := &in.AcsURL, &out.AcsURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotBefore != nil {
		in, out := &in.AssertionValidNotBefore, &out.AssertionValidNotBefore
		*out = new(string)
		**out = **in
	}
	if in.AssertionValidNotOnOrAfter != nil {
		in, out := &in.AssertionValidNotOnOrAfter, &out.AssertionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.Audience != nil {
		in, out := &in.Audience, &out.Audience
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlow != nil {
		in, out := &in.AuthorizationFlow, &out.AuthorizationFlow
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationFlowRef != nil {
		in, out := &in.AuthorizationFlowRef, &out.AuthorizationFlowRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationFlowSelector != nil {
		in, out := &in.AuthorizationFlowSelector, &out.AuthorizationFlowSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultRelayState != nil {
		in, out := &in.DefaultRelayState, &out.DefaultRelayState
		*out = new(string)
		**out = **in
	}
	if in.DigestAlgorithm != nil {
		in, out := &in.DigestAlgorithm, &out.DigestAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKp != nil {
		in, out := &in.EncryptionKp, &out.EncryptionKp
		*out = new(string)
		**out = **in
	}
	if in.InvalidationFlow != nil {
		in, out := &in.InvalidationFlow, &out.InvalidationFlow
		*out = new(string)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDMapping != nil {
		in, out := &in.NameIDMapping, &out.NameIDMapping
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SessionValidNotOnOrAfter != nil {
		in, out := &in.SessionValidNotOnOrAfter, &out.SessionValidNotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.SignAssertion != nil {
		in, out := &in.SignAssertion, &out.SignAssertion
		*out = new(bool)
		**out = **in
	}
	if in.SignResponse != nil {
		in, out := &in.SignResponse, &out.SignResponse
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SigningKp != nil {
		in, out := &in.SigningKp, &out.SigningKp
		*out = new(string)
		**out = **in
	}
	if in.SpBinding != nil {
		in, out := &in.SpBinding, &out.SpBinding
		*out = new(string)
		**out = **in
	}
	if in.URLSLOPost != nil {
		in, out := &in.URLSLOPost, &out.URLSLOPost
		*out = new(string)
		**out = **in
	}
	if in.URLSLORedirect != nil {
		in, out := &in.URLSLORedirect, &out.URLSLORedirect
		*out = new(string)
		**out = **in
	}
	if in.URLSsoInit != nil {
		in, out := &in.URLSsoInit, &out.URLSsoInit
		*out = new(string)
		**out = **in
	}
	if in.URLSsoPost != nil {
		in, out := &in.URLSsoPost, &out.URLSsoPost
		*out = new(string)
		**out = **in
	}
	if in.URLSsoRedirect != nil {
		in, out := &in.URLSsoRedirect, &out.URLSsoRedirect
		*out = new(string)
		**out = **in
	}
	if in.VerificationKp != nil {
		in, out := &in.VerificationKp, &out.VerificationKp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLParameters.
func (in *SAMLParameters) DeepCopy() *SAMLParameters {
	if in == nil {
		return nil
	}
	out := new(SAMLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLSpec) DeepCopyInto(out *SAMLSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLSpec.
func (in *SAMLSpec) DeepCopy() *SAMLSpec {
	if in == nil {
		return nil
	}
	out := new(SAMLSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLStatus) DeepCopyInto(out *SAMLStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLStatus.
func (in *SAMLStatus) DeepCopy() *SAMLStatus {
	if in == nil {
		return nil
	}
	out := new(SAMLStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIM) DeepCopyInto(out *SCIM) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIM.
func (in *SCIM) DeepCopy() *SCIM {
	if in == nil {
		return nil
	}
	out := new(SCIM)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SCIM) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMInitParameters) DeepCopyInto(out *SCIMInitParameters) {
	*out = *in
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.TokenSecretRef = in.TokenSecretRef
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMInitParameters.
func (in *SCIMInitParameters) DeepCopy() *SCIMInitParameters {
	if in == nil {
		return nil
	}
	out := new(SCIMInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMList) DeepCopyInto(out *SCIMList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SCIM, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMList.
func (in *SCIMList) DeepCopy() *SCIMList {
	if in == nil {
		return nil
	}
	out := new(SCIMList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SCIMList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMObservation) DeepCopyInto(out *SCIMObservation) {
	*out = *in
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMObservation.
func (in *SCIMObservation) DeepCopy() *SCIMObservation {
	if in == nil {
		return nil
	}
	out := new(SCIMObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMParameters) DeepCopyInto(out *SCIMParameters) {
	*out = *in
	if in.ExcludeUsersServiceAccount != nil {
		in, out := &in.ExcludeUsersServiceAccount, &out.ExcludeUsersServiceAccount
		*out = new(bool)
		**out = **in
	}
	if in.FilterGroup != nil {
		in, out := &in.FilterGroup, &out.FilterGroup
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyMappings != nil {
		in, out := &in.PropertyMappings, &out.PropertyMappings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PropertyMappingsGroup != nil {
		in, out := &in.PropertyMappingsGroup, &out.PropertyMappingsGroup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.TokenSecretRef = in.TokenSecretRef
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMParameters.
func (in *SCIMParameters) DeepCopy() *SCIMParameters {
	if in == nil {
		return nil
	}
	out := new(SCIMParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMSpec) DeepCopyInto(out *SCIMSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMSpec.
func (in *SCIMSpec) DeepCopy() *SCIMSpec {
	if in == nil {
		return nil
	}
	out := new(SCIMSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCIMStatus) DeepCopyInto(out *SCIMStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCIMStatus.
func (in *SCIMStatus) DeepCopy() *SCIMStatus {
	if in == nil {
		return nil
	}
	out := new(SCIMStatus)
	in.DeepCopyInto(out)
	return out
}
